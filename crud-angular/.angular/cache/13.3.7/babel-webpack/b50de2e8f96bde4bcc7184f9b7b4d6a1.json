{"ast":null,"code":"import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i2$1 from '@angular/cdk/a11y';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.action();\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\n\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) {}\n\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\n\nclass MatSnackBarConfig {\n  constructor() {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n\n    this.announcementMessage = '';\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n\n    this.duration = 0;\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** The horizontal position to place the snack bar. */\n\n    this.horizontalPosition = 'center';\n    /** The vertical position to place the snack bar. */\n\n    this.verticalPosition = 'bottom';\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\n\n\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\n\nclass MatSnackBarRef {\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n\n    this._onAction = new Subject();\n    /** Whether the snack bar was dismissed using the action button. */\n\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance;\n\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /** Dismisses the snack bar. */\n\n\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /** Marks the snackbar action clicked. */\n\n\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n\n      this._onAction.next();\n\n      this._onAction.complete();\n\n      this.dismiss();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n\n\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /** Dismisses the snack bar after some duration */\n\n\n  _dismissAfter(duration) {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n  /** Marks the snackbar as opened */\n\n\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }\n  }\n  /** Cleans up the DOM after closing. */\n\n\n  _finishDismiss() {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n\n    this._afterDismissed.complete();\n\n    this._dismissedByAction = false;\n  }\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n\n\n  afterDismissed() {\n    return this._afterDismissed;\n  }\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n\n\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /** Gets an observable that is notified when the snack bar action is called. */\n\n\n  onAction() {\n    return this._onAction;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n\n\nclass SimpleSnackBar {\n  constructor(snackBarRef, data) {\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /** Performs the action on the snack bar. */\n\n\n  action() {\n    this.snackBarRef.dismissWithAction();\n  }\n  /** If the action button should be shown. */\n\n\n  get hasAction() {\n    return !!this.data.action;\n  }\n\n}\n\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n  return new (t || SimpleSnackBar)(i0.ɵɵdirectiveInject(MatSnackBarRef), i0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n};\n\nSimpleSnackBar.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SimpleSnackBar,\n  selectors: [[\"simple-snack-bar\"]],\n  hostAttrs: [1, \"mat-simple-snackbar\"],\n  decls: 3,\n  vars: 2,\n  consts: [[1, \"mat-simple-snack-bar-content\"], [\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n  template: function SimpleSnackBar_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"span\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.data.message);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    }\n  },\n  directives: [i2.MatButton, i3.NgIf],\n  styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SimpleSnackBar, [{\n    type: Component,\n    args: [{\n      selector: 'simple-snack-bar',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-simple-snackbar'\n      },\n      template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n      styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSnackBarRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DATA]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\n\n\nconst matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [state('void, hidden', style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), state('visible', style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n\nclass MatSnackBarContainer extends BasePortalOutlet {\n  constructor(_ngZone, _elementRef, _changeDetectorRef, _platform,\n  /** The snack bar configuration. */\n  snackBarConfig) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._platform = _platform;\n    this.snackBarConfig = snackBarConfig;\n    /** The number of milliseconds to wait before announcing the snack bar's content. */\n\n    this._announceDelay = 150;\n    /** Whether the component has been destroyed. */\n\n    this._destroyed = false;\n    /** Subject for notifying that the snack bar has announced to screen readers. */\n\n    this._onAnnounce = new Subject();\n    /** Subject for notifying that the snack bar has exited from view. */\n\n    this._onExit = new Subject();\n    /** Subject for notifying that the snack bar has finished entering the view. */\n\n    this._onEnter = new Subject();\n    /** The state of the snack bar animations. */\n\n    this._animationState = 'void';\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    this.attachDomPortal = portal => {\n      this._assertNotAttached();\n\n      this._applySnackBarClasses();\n\n      return this._portalOutlet.attachDomPortal(portal);\n    }; // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n\n\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._live = 'assertive';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._live = 'off';\n    } else {\n      this._live = 'polite';\n    } // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n\n\n    if (this._platform.FIREFOX) {\n      if (this._live === 'polite') {\n        this._role = 'status';\n      }\n\n      if (this._live === 'assertive') {\n        this._role = 'alert';\n      }\n    }\n  }\n  /** Attach a component portal as content to this snack bar container. */\n\n\n  attachComponentPortal(portal) {\n    this._assertNotAttached();\n\n    this._applySnackBarClasses();\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /** Attach a template portal as content to this snack bar container. */\n\n\n  attachTemplatePortal(portal) {\n    this._assertNotAttached();\n\n    this._applySnackBarClasses();\n\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /** Handle end of animations, updating the state of the snackbar. */\n\n\n  onAnimationEnd(event) {\n    const {\n      fromState,\n      toState\n    } = event;\n\n    if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n  /** Begin animation of snack bar entrance into view. */\n\n\n  enter() {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n\n      this._changeDetectorRef.detectChanges();\n\n      this._screenReaderAnnounce();\n    }\n  }\n  /** Begin animation of the snack bar exiting from view. */\n\n\n  exit() {\n    // It's common for snack bars to be opened by random outside calls like HTTP requests or\n    // errors. Run inside the NgZone to ensure that it functions correctly.\n    this._ngZone.run(() => {\n      // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n      // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n      // `MatSnackBar.open`).\n      this._animationState = 'hidden'; // Mark this element with an 'exit' attribute to indicate that the snackbar has\n      // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n      // test harness.\n\n      this._elementRef.nativeElement.setAttribute('mat-exit', ''); // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n      // long enough to visually read it either, so clear the timeout for announcing.\n\n\n      clearTimeout(this._announceTimeoutId);\n    });\n\n    return this._onExit;\n  }\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n\n\n  ngOnDestroy() {\n    this._destroyed = true;\n\n    this._completeExit();\n  }\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n\n\n  _completeExit() {\n    this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._onExit.next();\n\n        this._onExit.complete();\n      });\n    });\n  }\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n\n\n  _applySnackBarClasses() {\n    const element = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n  /** Asserts that no content is already attached to the container. */\n\n\n  _assertNotAttached() {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n  /**\n   * Starts a timeout to move the snack bar content to the live region so screen readers will\n   * announce it.\n   */\n\n\n  _screenReaderAnnounce() {\n    if (!this._announceTimeoutId) {\n      this._ngZone.runOutsideAngular(() => {\n        this._announceTimeoutId = setTimeout(() => {\n          const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n\n          const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n\n          if (inertElement && liveElement) {\n            // If an element in the snack bar content is focused before being moved\n            // track it and restore focus after moving to the live region.\n            let focusedElement = null;\n\n            if (this._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n              focusedElement = document.activeElement;\n            }\n\n            inertElement.removeAttribute('aria-hidden');\n            liveElement.appendChild(inertElement);\n            focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n\n            this._onAnnounce.next();\n\n            this._onAnnounce.complete();\n          }\n        }, this._announceDelay);\n      });\n    }\n  }\n\n}\n\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) {\n  return new (t || MatSnackBarContainer)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(MatSnackBarConfig));\n};\n\nMatSnackBarContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSnackBarContainer,\n  selectors: [[\"snack-bar-container\"]],\n  viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-snack-bar-container\"],\n  hostVars: 1,\n  hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n        return ctx.onAnimationEnd($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 2,\n  consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n  template: function MatSnackBarContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"div\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    }\n  },\n  directives: [i3$1.CdkPortalOutlet],\n  styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSnackBarAnimations.snackBarState]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSnackBarContainer, [{\n    type: Component,\n    args: [{\n      selector: 'snack-bar-container',\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      animations: [matSnackBarAnimations.snackBarState],\n      host: {\n        'class': 'mat-snack-bar-container',\n        '[@state]': '_animationState',\n        '(@state.done)': 'onAnimationEnd($event)'\n      },\n      template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n      styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.Platform\n    }, {\n      type: MatSnackBarConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSnackBarModule {}\n\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n  return new (t || MatSnackBarModule)();\n};\n\nMatSnackBarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSnackBarModule\n});\nMatSnackBarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSnackBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n      exports: [MatSnackBarContainer, MatCommonModule],\n      declarations: [MatSnackBarContainer, SimpleSnackBar]\n    }]\n  }], null, null);\n})();\n/** Injection token that can be used to specify default snack bar. */\n\n\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n\nclass _MatSnackBarBase {\n  constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n\n    this._snackBarRefAtThisLevel = null;\n  }\n  /** Reference to the currently opened snackbar at *any* level. */\n\n\n  get _openedSnackBarRef() {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n\n\n  openFromComponent(component, config) {\n    return this._attach(component, config);\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n\n\n  openFromTemplate(template, config) {\n    return this._attach(template, config);\n  }\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n\n\n  open(message, action = '', config) {\n    const _config = Object.assign(Object.assign({}, this._defaultConfig), config); // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n\n\n    _config.data = {\n      message,\n      action\n    }; // Since the snack bar has `role=\"alert\"`, we don't\n    // want to announce the same message twice.\n\n    if (_config.announcementMessage === message) {\n      _config.announcementMessage = undefined;\n    }\n\n    return this.openFromComponent(this.simpleSnackBarComponent, _config);\n  }\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n\n\n  dismiss() {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n\n\n  _attachSnackBarContainer(overlayRef, config) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatSnackBarConfig,\n        useValue: config\n      }]\n    });\n    const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n    const containerRef = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n\n\n  _attach(content, userConfig) {\n    const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n\n    const overlayRef = this._createOverlay(config);\n\n    const container = this._attachSnackBarContainer(overlayRef, config);\n\n    const snackBarRef = new MatSnackBarRef(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null, {\n        $implicit: config.data,\n        snackBarRef\n      });\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal(portal); // We can't pass this via the injector, because the injector is created earlier.\n\n      snackBarRef.instance = contentRef.instance;\n    } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n\n\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n      overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n    });\n\n    if (config.announcementMessage) {\n      // Wait until the snack bar contents have been announced then deliver this message.\n      container._onAnnounce.subscribe(() => {\n        this._live.announce(config.announcementMessage, config.politeness);\n      });\n    }\n\n    this._animateSnackBar(snackBarRef, config);\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n  /** Animates the old snack bar out and the new one in. */\n\n\n  _animateSnackBar(snackBarRef, config) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n\n\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n    }\n  }\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n\n\n  _createOverlay(config) {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global(); // Set horizontal position.\n\n\n    const isRtl = config.direction === 'rtl';\n    const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    } // Set horizontal position.\n\n\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n\n\n  _createInjector(config, snackBarRef) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatSnackBarRef,\n        useValue: snackBarRef\n      }, {\n        provide: MAT_SNACK_BAR_DATA,\n        useValue: config.data\n      }]\n    });\n  }\n\n}\n\n_MatSnackBarBase.ɵfac = function _MatSnackBarBase_Factory(t) {\n  return new (t || _MatSnackBarBase)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i2$1.LiveAnnouncer), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3$2.BreakpointObserver), i0.ɵɵinject(_MatSnackBarBase, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\n\n_MatSnackBarBase.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _MatSnackBarBase,\n  factory: _MatSnackBarBase.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatSnackBarBase, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i2$1.LiveAnnouncer\n    }, {\n      type: i0.Injector\n    }, {\n      type: i3$2.BreakpointObserver\n    }, {\n      type: _MatSnackBarBase,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n\n\nclass MatSnackBar extends _MatSnackBarBase {\n  constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n    super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n    this.simpleSnackBarComponent = SimpleSnackBar;\n    this.snackBarContainerComponent = MatSnackBarContainer;\n    this.handsetCssClass = 'mat-snack-bar-handset';\n  }\n\n}\n\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n  return new (t || MatSnackBar)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i2$1.LiveAnnouncer), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3$2.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\n\nMatSnackBar.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatSnackBar,\n  factory: MatSnackBar.ɵfac,\n  providedIn: MatSnackBarModule\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSnackBar, [{\n    type: Injectable,\n    args: [{\n      providedIn: MatSnackBarModule\n    }]\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i2$1.LiveAnnouncer\n    }, {\n      type: i0.Injector\n    }, {\n      type: i3$2.BreakpointObserver\n    }, {\n      type: MatSnackBar,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, matSnackBarAnimations };","map":{"version":3,"names":["i1$1","OverlayModule","OverlayConfig","i3$1","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","i3","CommonModule","i0","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","ViewChild","NgModule","Injector","TemplateRef","Injectable","Optional","SkipSelf","MatCommonModule","i2","MatButtonModule","Subject","take","takeUntil","trigger","state","style","transition","animate","i1","i3$2","Breakpoints","i2$1","MAT_SNACK_BAR_DATA","MatSnackBarConfig","constructor","politeness","announcementMessage","duration","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","subscribe","_finishDismiss","dismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","SimpleSnackBar","snackBarRef","action","hasAction","ɵfac","ɵcmp","MatButton","NgIf","type","args","selector","encapsulation","None","changeDetection","OnPush","host","template","styles","undefined","decorators","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","ngOnDestroy","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","ngDevMode","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","NgZone","ElementRef","ChangeDetectorRef","Platform","Default","animations","static","MatSnackBarModule","ɵmod","ɵinj","imports","exports","declarations","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","_MatSnackBarBase","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","parent","value","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","Object","assign","simpleSnackBarComponent","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","snackBarContainerComponent","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","toggle","handsetCssClass","matches","announce","_animateSnackBar","clear","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","Overlay","LiveAnnouncer","BreakpointObserver","ɵprov","MatSnackBar","overlay","live","breakpointObserver","parentSnackBar","defaultConfig"],"sources":["/home/raphael/Projects/youtube-LoianeGroner/crud-angular-spring/crud-angular/node_modules/@angular/material/fesm2015/snack-bar.mjs"],"sourcesContent":["import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i2$1 from '@angular/cdk/a11y';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\\n\"], components: [{ type: i2.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DATA]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarContainer, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], directives: [{ type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, matSnackBarAnimations };\n"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,sBAAtB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,sBAA7C;AACA,OAAO,KAAKC,IAAZ,MAAsB,qBAAtB;AACA,SAASC,gBAAT,EAA2BC,eAA3B,EAA4CC,YAA5C,EAA0DC,eAA1D,EAA2EC,cAA3E,QAAiG,qBAAjG;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,cAAT,EAAyBC,SAAzB,EAAoCC,iBAApC,EAAuDC,uBAAvD,EAAgFC,MAAhF,EAAwFC,SAAxF,EAAmGC,QAAnG,EAA6GC,QAA7G,EAAuHC,WAAvH,EAAoIC,UAApI,EAAgJC,QAAhJ,EAA0JC,QAA1J,QAA0K,eAA1K;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,OAAO,KAAKC,EAAZ,MAAoB,0BAApB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,gBAAhC;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,UAAhC,EAA4CC,OAA5C,QAA2D,qBAA3D;AACA,OAAO,KAAKC,EAAZ,MAAoB,uBAApB;AACA,OAAO,KAAKC,IAAZ,MAAsB,qBAAtB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAO,KAAKC,IAAZ,MAAsB,mBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;;gBA0IiG3B,E;;IAAAA,EAC4L,4C;IAD5LA,EACkR;MADlRA,EACkR;MAAA,eADlRA,EACkR;MAAA,OAAU,eAAV;IAAA,E;IADlRA,EACuS,U;IADvSA,EACsT,iB;;;;mBADtTA,E;IAAAA,EACuS,a;IADvSA,EACuS,sC;;;;;;AA1IxY,MAAM4B,kBAAkB,GAAG,IAAI3B,cAAJ,CAAmB,iBAAnB,CAA3B;AACA;AACA;AACA;;AACA,MAAM4B,iBAAN,CAAwB;EACpBC,WAAW,GAAG;IACV;IACA,KAAKC,UAAL,GAAkB,WAAlB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,mBAAL,GAA2B,EAA3B;IACA;;IACA,KAAKC,QAAL,GAAgB,CAAhB;IACA;;IACA,KAAKC,IAAL,GAAY,IAAZ;IACA;;IACA,KAAKC,kBAAL,GAA0B,QAA1B;IACA;;IACA,KAAKC,gBAAL,GAAwB,QAAxB;EACH;;AAjBmB;AAoBxB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAAtC;AACA;AACA;AACA;;AACA,MAAMC,cAAN,CAAqB;EACjBV,WAAW,CAACW,iBAAD,EAAoBC,WAApB,EAAiC;IACxC,KAAKA,WAAL,GAAmBA,WAAnB;IACA;;IACA,KAAKC,eAAL,GAAuB,IAAI3B,OAAJ,EAAvB;IACA;;IACA,KAAK4B,YAAL,GAAoB,IAAI5B,OAAJ,EAApB;IACA;;IACA,KAAK6B,SAAL,GAAiB,IAAI7B,OAAJ,EAAjB;IACA;;IACA,KAAK8B,kBAAL,GAA0B,KAA1B;IACA,KAAKL,iBAAL,GAAyBA,iBAAzB;;IACAA,iBAAiB,CAACM,OAAlB,CAA0BC,SAA1B,CAAoC,MAAM,KAAKC,cAAL,EAA1C;EACH;EACD;;;EACAC,OAAO,GAAG;IACN,IAAI,CAAC,KAAKP,eAAL,CAAqBQ,MAA1B,EAAkC;MAC9B,KAAKV,iBAAL,CAAuBW,IAAvB;IACH;;IACDC,YAAY,CAAC,KAAKC,kBAAN,CAAZ;EACH;EACD;;;EACAC,iBAAiB,GAAG;IAChB,IAAI,CAAC,KAAKV,SAAL,CAAeM,MAApB,EAA4B;MACxB,KAAKL,kBAAL,GAA0B,IAA1B;;MACA,KAAKD,SAAL,CAAeW,IAAf;;MACA,KAAKX,SAAL,CAAeY,QAAf;;MACA,KAAKP,OAAL;IACH;;IACDG,YAAY,CAAC,KAAKC,kBAAN,CAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACII,eAAe,GAAG;IACd,KAAKH,iBAAL;EACH;EACD;;;EACAI,aAAa,CAAC1B,QAAD,EAAW;IACpB;IACA;IACA,KAAKqB,kBAAL,GAA0BM,UAAU,CAAC,MAAM,KAAKV,OAAL,EAAP,EAAuBZ,IAAI,CAACuB,GAAL,CAAS5B,QAAT,EAAmBI,WAAnB,CAAvB,CAApC;EACH;EACD;;;EACAyB,KAAK,GAAG;IACJ,IAAI,CAAC,KAAKlB,YAAL,CAAkBO,MAAvB,EAA+B;MAC3B,KAAKP,YAAL,CAAkBY,IAAlB;;MACA,KAAKZ,YAAL,CAAkBa,QAAlB;IACH;EACJ;EACD;;;EACAR,cAAc,GAAG;IACb,KAAKP,WAAL,CAAiBqB,OAAjB;;IACA,IAAI,CAAC,KAAKlB,SAAL,CAAeM,MAApB,EAA4B;MACxB,KAAKN,SAAL,CAAeY,QAAf;IACH;;IACD,KAAKd,eAAL,CAAqBa,IAArB,CAA0B;MAAEQ,iBAAiB,EAAE,KAAKlB;IAA1B,CAA1B;;IACA,KAAKH,eAAL,CAAqBc,QAArB;;IACA,KAAKX,kBAAL,GAA0B,KAA1B;EACH;EACD;;;EACAmB,cAAc,GAAG;IACb,OAAO,KAAKtB,eAAZ;EACH;EACD;;;EACAuB,WAAW,GAAG;IACV,OAAO,KAAKzB,iBAAL,CAAuB0B,QAA9B;EACH;EACD;;;EACAC,QAAQ,GAAG;IACP,OAAO,KAAKvB,SAAZ;EACH;;AAzEgB;AA4ErB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMwB,cAAN,CAAqB;EACjBvC,WAAW,CAACwC,WAAD,EAAcpC,IAAd,EAAoB;IAC3B,KAAKoC,WAAL,GAAmBA,WAAnB;IACA,KAAKpC,IAAL,GAAYA,IAAZ;EACH;EACD;;;EACAqC,MAAM,GAAG;IACL,KAAKD,WAAL,CAAiBf,iBAAjB;EACH;EACD;;;EACa,IAATiB,SAAS,GAAG;IACZ,OAAO,CAAC,CAAC,KAAKtC,IAAL,CAAUqC,MAAnB;EACH;;AAZgB;;AAcrBF,cAAc,CAACI,IAAf;EAAA,iBAA2GJ,cAA3G,EAAiGrE,EAAjG,mBAA2IwC,cAA3I,GAAiGxC,EAAjG,mBAAsK4B,kBAAtK;AAAA;;AACAyC,cAAc,CAACK,IAAf,kBADiG1E,EACjG;EAAA,MAA+FqE,cAA/F;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;IAAA;MADiGrE,EACsH,6BAAvN;MADiGA,EACmK,UAApQ;MADiGA,EACmL,eAApR;MADiGA,EAC4L,6DAA7R;IAAA;;IAAA;MADiGA,EACmK,aAApQ;MADiGA,EACmK,oCAApQ;MADiGA,EACwO,aAAzU;MADiGA,EACwO,kCAAzU;IAAA;EAAA;EAAA,aAAg1Bc,EAAE,CAAC6D,SAAn1B,EAAuoC7E,EAAE,CAAC8E,IAA1oC;EAAA;EAAA;EAAA;AAAA;;AACA;EAAA,mDAFiG5E,EAEjG,mBAA2FqE,cAA3F,EAAuH,CAAC;IAC5GQ,IAAI,EAAE3E,SADsG;IAE5G4E,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAE,kBAAZ;MAAgCC,aAAa,EAAE7E,iBAAiB,CAAC8E,IAAjE;MAAuEC,eAAe,EAAE9E,uBAAuB,CAAC+E,MAAhH;MAAwHC,IAAI,EAAE;QACzH,SAAS;MADgH,CAA9H;MAEIC,QAAQ,EAAE,qNAFd;MAEqOC,MAAM,EAAE,CAAC,kYAAD;IAF7O,CAAD;EAFsG,CAAD,CAAvH,EAK4B,YAAY;IAChC,OAAO,CAAC;MAAET,IAAI,EAAErC;IAAR,CAAD,EAA2B;MAAEqC,IAAI,EAAEU,SAAR;MAAmBC,UAAU,EAAE,CAAC;QAClDX,IAAI,EAAExE,MAD4C;QAElDyE,IAAI,EAAE,CAAClD,kBAAD;MAF4C,CAAD;IAA/B,CAA3B,CAAP;EAIH,CAVL;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAM6D,qBAAqB,GAAG;EAC1B;EACAC,aAAa,EAAEvE,OAAO,CAAC,OAAD,EAAU,CAC5BC,KAAK,CAAC,cAAD,EAAiBC,KAAK,CAAC;IACxBsE,SAAS,EAAE,YADa;IAExBC,OAAO,EAAE;EAFe,CAAD,CAAtB,CADuB,EAK5BxE,KAAK,CAAC,SAAD,EAAYC,KAAK,CAAC;IACnBsE,SAAS,EAAE,UADQ;IAEnBC,OAAO,EAAE;EAFU,CAAD,CAAjB,CALuB,EAS5BtE,UAAU,CAAC,cAAD,EAAiBC,OAAO,CAAC,kCAAD,CAAxB,CATkB,EAU5BD,UAAU,CAAC,wBAAD,EAA2BC,OAAO,CAAC,mCAAD,EAAsCF,KAAK,CAAC;IACpFuE,OAAO,EAAE;EAD2E,CAAD,CAA3C,CAAlC,CAVkB,CAAV;AAFI,CAA9B;AAkBA;AACA;AACA;AACA;;AACA,MAAMC,oBAAN,SAAmCpG,gBAAnC,CAAoD;EAChDqC,WAAW,CAACgE,OAAD,EAAUC,WAAV,EAAuBC,kBAAvB,EAA2CC,SAA3C;EACX;EACAC,cAFW,EAEK;IACZ;IACA,KAAKJ,OAAL,GAAeA,OAAf;IACA,KAAKC,WAAL,GAAmBA,WAAnB;IACA,KAAKC,kBAAL,GAA0BA,kBAA1B;IACA,KAAKC,SAAL,GAAiBA,SAAjB;IACA,KAAKC,cAAL,GAAsBA,cAAtB;IACA;;IACA,KAAKC,cAAL,GAAsB,GAAtB;IACA;;IACA,KAAKC,UAAL,GAAkB,KAAlB;IACA;;IACA,KAAKC,WAAL,GAAmB,IAAIrF,OAAJ,EAAnB;IACA;;IACA,KAAK+B,OAAL,GAAe,IAAI/B,OAAJ,EAAf;IACA;;IACA,KAAKmD,QAAL,GAAgB,IAAInD,OAAJ,EAAhB;IACA;;IACA,KAAKsF,eAAL,GAAuB,MAAvB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,eAAL,GAAwBC,MAAD,IAAY;MAC/B,KAAKC,kBAAL;;MACA,KAAKC,qBAAL;;MACA,OAAO,KAAKC,aAAL,CAAmBJ,eAAnB,CAAmCC,MAAnC,CAAP;IACH,CAJD,CAxBY,CA6BZ;IACA;;;IACA,IAAIN,cAAc,CAACnE,UAAf,KAA8B,WAA9B,IAA6C,CAACmE,cAAc,CAAClE,mBAAjE,EAAsF;MAClF,KAAK4E,KAAL,GAAa,WAAb;IACH,CAFD,MAGK,IAAIV,cAAc,CAACnE,UAAf,KAA8B,KAAlC,EAAyC;MAC1C,KAAK6E,KAAL,GAAa,KAAb;IACH,CAFI,MAGA;MACD,KAAKA,KAAL,GAAa,QAAb;IACH,CAvCW,CAwCZ;IACA;;;IACA,IAAI,KAAKX,SAAL,CAAeY,OAAnB,EAA4B;MACxB,IAAI,KAAKD,KAAL,KAAe,QAAnB,EAA6B;QACzB,KAAKE,KAAL,GAAa,QAAb;MACH;;MACD,IAAI,KAAKF,KAAL,KAAe,WAAnB,EAAgC;QAC5B,KAAKE,KAAL,GAAa,OAAb;MACH;IACJ;EACJ;EACD;;;EACAC,qBAAqB,CAACP,MAAD,EAAS;IAC1B,KAAKC,kBAAL;;IACA,KAAKC,qBAAL;;IACA,OAAO,KAAKC,aAAL,CAAmBI,qBAAnB,CAAyCP,MAAzC,CAAP;EACH;EACD;;;EACAQ,oBAAoB,CAACR,MAAD,EAAS;IACzB,KAAKC,kBAAL;;IACA,KAAKC,qBAAL;;IACA,OAAO,KAAKC,aAAL,CAAmBK,oBAAnB,CAAwCR,MAAxC,CAAP;EACH;EACD;;;EACAS,cAAc,CAACC,KAAD,EAAQ;IAClB,MAAM;MAAEC,SAAF;MAAaC;IAAb,IAAyBF,KAA/B;;IACA,IAAKE,OAAO,KAAK,MAAZ,IAAsBD,SAAS,KAAK,MAArC,IAAgDC,OAAO,KAAK,QAAhE,EAA0E;MACtE,KAAKC,aAAL;IACH;;IACD,IAAID,OAAO,KAAK,SAAhB,EAA2B;MACvB;MACA;MACA,MAAME,OAAO,GAAG,KAAKnD,QAArB;;MACA,KAAK2B,OAAL,CAAayB,GAAb,CAAiB,MAAM;QACnBD,OAAO,CAAC9D,IAAR;QACA8D,OAAO,CAAC7D,QAAR;MACH,CAHD;IAIH;EACJ;EACD;;;EACA+D,KAAK,GAAG;IACJ,IAAI,CAAC,KAAKpB,UAAV,EAAsB;MAClB,KAAKE,eAAL,GAAuB,SAAvB;;MACA,KAAKN,kBAAL,CAAwByB,aAAxB;;MACA,KAAKC,qBAAL;IACH;EACJ;EACD;;;EACAtE,IAAI,GAAG;IACH;IACA;IACA,KAAK0C,OAAL,CAAayB,GAAb,CAAiB,MAAM;MACnB;MACA;MACA;MACA,KAAKjB,eAAL,GAAuB,QAAvB,CAJmB,CAKnB;MACA;MACA;;MACA,KAAKP,WAAL,CAAiB4B,aAAjB,CAA+BC,YAA/B,CAA4C,UAA5C,EAAwD,EAAxD,EARmB,CASnB;MACA;;;MACAvE,YAAY,CAAC,KAAKwE,kBAAN,CAAZ;IACH,CAZD;;IAaA,OAAO,KAAK9E,OAAZ;EACH;EACD;;;EACA+E,WAAW,GAAG;IACV,KAAK1B,UAAL,GAAkB,IAAlB;;IACA,KAAKiB,aAAL;EACH;EACD;AACJ;AACA;AACA;;;EACIA,aAAa,GAAG;IACZ,KAAKvB,OAAL,CAAaiC,gBAAb,CAA8BC,IAA9B,CAAmC/G,IAAI,CAAC,CAAD,CAAvC,EAA4C+B,SAA5C,CAAsD,MAAM;MACxD,KAAK8C,OAAL,CAAayB,GAAb,CAAiB,MAAM;QACnB,KAAKxE,OAAL,CAAaS,IAAb;;QACA,KAAKT,OAAL,CAAaU,QAAb;MACH,CAHD;IAIH,CALD;EAMH;EACD;;;EACAiD,qBAAqB,GAAG;IACpB,MAAMuB,OAAO,GAAG,KAAKlC,WAAL,CAAiB4B,aAAjC;IACA,MAAMO,YAAY,GAAG,KAAKhC,cAAL,CAAoBiC,UAAzC;;IACA,IAAID,YAAJ,EAAkB;MACd,IAAIE,KAAK,CAACC,OAAN,CAAcH,YAAd,CAAJ,EAAiC;QAC7B;QACAA,YAAY,CAACI,OAAb,CAAqBC,QAAQ,IAAIN,OAAO,CAACO,SAAR,CAAkBC,GAAlB,CAAsBF,QAAtB,CAAjC;MACH,CAHD,MAIK;QACDN,OAAO,CAACO,SAAR,CAAkBC,GAAlB,CAAsBP,YAAtB;MACH;IACJ;;IACD,IAAI,KAAKhC,cAAL,CAAoB/D,kBAApB,KAA2C,QAA/C,EAAyD;MACrD8F,OAAO,CAACO,SAAR,CAAkBC,GAAlB,CAAsB,sBAAtB;IACH;;IACD,IAAI,KAAKvC,cAAL,CAAoB9D,gBAApB,KAAyC,KAA7C,EAAoD;MAChD6F,OAAO,CAACO,SAAR,CAAkBC,GAAlB,CAAsB,mBAAtB;IACH;EACJ;EACD;;;EACAhC,kBAAkB,GAAG;IACjB,IAAI,KAAKE,aAAL,CAAmB+B,WAAnB,OAAqC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAAzE,CAAJ,EAAyF;MACrF,MAAMC,KAAK,CAAC,0EAAD,CAAX;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACIlB,qBAAqB,GAAG;IACpB,IAAI,CAAC,KAAKG,kBAAV,EAA8B;MAC1B,KAAK/B,OAAL,CAAa+C,iBAAb,CAA+B,MAAM;QACjC,KAAKhB,kBAAL,GAA0BjE,UAAU,CAAC,MAAM;UACvC,MAAMkF,YAAY,GAAG,KAAK/C,WAAL,CAAiB4B,aAAjB,CAA+BoB,aAA/B,CAA6C,eAA7C,CAArB;;UACA,MAAMC,WAAW,GAAG,KAAKjD,WAAL,CAAiB4B,aAAjB,CAA+BoB,aAA/B,CAA6C,aAA7C,CAApB;;UACA,IAAID,YAAY,IAAIE,WAApB,EAAiC;YAC7B;YACA;YACA,IAAIC,cAAc,GAAG,IAArB;;YACA,IAAI,KAAKhD,SAAL,CAAeiD,SAAf,IACAC,QAAQ,CAACC,aAAT,YAAkCC,WADlC,IAEAP,YAAY,CAACQ,QAAb,CAAsBH,QAAQ,CAACC,aAA/B,CAFJ,EAEmD;cAC/CH,cAAc,GAAGE,QAAQ,CAACC,aAA1B;YACH;;YACDN,YAAY,CAACS,eAAb,CAA6B,aAA7B;YACAP,WAAW,CAACQ,WAAZ,CAAwBV,YAAxB;YACAG,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,cAAc,CAACQ,KAAf,EAAhE;;YACA,KAAKpD,WAAL,CAAiB7C,IAAjB;;YACA,KAAK6C,WAAL,CAAiB5C,QAAjB;UACH;QACJ,CAlBmC,EAkBjC,KAAK0C,cAlB4B,CAApC;MAmBH,CApBD;IAqBH;EACJ;;AApL+C;;AAsLpDN,oBAAoB,CAACpB,IAArB;EAAA,iBAAiHoB,oBAAjH,EArOiG7F,EAqOjG,mBAAuJA,EAAE,CAAC0J,MAA1J,GArOiG1J,EAqOjG,mBAA6KA,EAAE,CAAC2J,UAAhL,GArOiG3J,EAqOjG,mBAAuMA,EAAE,CAAC4J,iBAA1M,GArOiG5J,EAqOjG,mBAAwOwB,EAAE,CAACqI,QAA3O,GArOiG7J,EAqOjG,mBAAgQ6B,iBAAhQ;AAAA;;AACAgE,oBAAoB,CAACnB,IAArB,kBAtOiG1E,EAsOjG;EAAA,MAAqG6F,oBAArG;EAAA;EAAA;IAAA;MAtOiG7F,EAsOjG,aAA6XN,eAA7X;IAAA;;IAAA;MAAA;;MAtOiGM,EAsOjG,qBAtOiGA,EAsOjG;IAAA;EAAA;EAAA;EAAA;EAAA;IAAA;MAtOiGA,EAsOjG;QAAA,OAAqG,0BAArG;MAAA;IAAA;;IAAA;MAtOiGA,EAsOjG;IAAA;EAAA;EAAA,WAtOiGA,EAsOjG;EAAA;EAAA;EAAA;EAAA;IAAA;MAtOiGA,EAsOoe,4BAArkB;MAtOiGA,EAsOkgB,mFAAnmB;MAtOiGA,EAsO+iB,eAAhpB;MAtOiGA,EAsO0qB,oBAA3wB;IAAA;;IAAA;MAtOiGA,EAsO+qB,aAAhxB;MAtOiGA,EAsO+qB,uDAAhxB;IAAA;EAAA;EAAA,aAA4uCR,IAAI,CAACE,eAAjvC;EAAA;EAAA;EAAA;IAAA,WAAm4C,CAAC+F,qBAAqB,CAACC,aAAvB;EAAn4C;AAAA;;AACA;EAAA,mDAvOiG1F,EAuOjG,mBAA2F6F,oBAA3F,EAA6H,CAAC;IAClHhB,IAAI,EAAE3E,SAD4G;IAElH4E,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAE,qBAAZ;MAAmCG,eAAe,EAAE9E,uBAAuB,CAAC0J,OAA5E;MAAqF9E,aAAa,EAAE7E,iBAAiB,CAAC8E,IAAtH;MAA4H8E,UAAU,EAAE,CAACtE,qBAAqB,CAACC,aAAvB,CAAxI;MAA+KN,IAAI,EAAE;QAChL,SAAS,yBADuK;QAEhL,YAAY,iBAFoK;QAGhL,iBAAiB;MAH+J,CAArL;MAIIC,QAAQ,EAAE,yWAJd;MAIyXC,MAAM,EAAE,CAAC,+XAAD;IAJjY,CAAD;EAF4G,CAAD,CAA7H,EAO4B,YAAY;IAAE,OAAO,CAAC;MAAET,IAAI,EAAE7E,EAAE,CAAC0J;IAAX,CAAD,EAAsB;MAAE7E,IAAI,EAAE7E,EAAE,CAAC2J;IAAX,CAAtB,EAA+C;MAAE9E,IAAI,EAAE7E,EAAE,CAAC4J;IAAX,CAA/C,EAA+E;MAAE/E,IAAI,EAAErD,EAAE,CAACqI;IAAX,CAA/E,EAAsG;MAAEhF,IAAI,EAAEhD;IAAR,CAAtG,CAAP;EAA4I,CAPtL,EAOwM;IAAE8E,aAAa,EAAE,CAAC;MAC1M9B,IAAI,EAAEvE,SADoM;MAE1MwE,IAAI,EAAE,CAACpF,eAAD,EAAkB;QAAEsK,MAAM,EAAE;MAAV,CAAlB;IAFoM,CAAD;EAAjB,CAPxM;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,iBAAN,CAAwB;;AAExBA,iBAAiB,CAACxF,IAAlB;EAAA,iBAA8GwF,iBAA9G;AAAA;;AACAA,iBAAiB,CAACC,IAAlB,kBA7PiGlK,EA6PjG;EAAA,MAA+GiK;AAA/G;AACAA,iBAAiB,CAACE,IAAlB,kBA9PiGnK,EA8PjG;EAAA,UAA4I,CAACV,aAAD,EAAgBK,YAAhB,EAA8BI,YAA9B,EAA4CgB,eAA5C,EAA6DF,eAA7D,CAA5I,EAA2NA,eAA3N;AAAA;;AACA;EAAA,mDA/PiGb,EA+PjG,mBAA2FiK,iBAA3F,EAA0H,CAAC;IAC/GpF,IAAI,EAAEtE,QADyG;IAE/GuE,IAAI,EAAE,CAAC;MACCsF,OAAO,EAAE,CAAC9K,aAAD,EAAgBK,YAAhB,EAA8BI,YAA9B,EAA4CgB,eAA5C,EAA6DF,eAA7D,CADV;MAECwJ,OAAO,EAAE,CAACxE,oBAAD,EAAuBhF,eAAvB,CAFV;MAGCyJ,YAAY,EAAE,CAACzE,oBAAD,EAAuBxB,cAAvB;IAHf,CAAD;EAFyG,CAAD,CAA1H;AAAA;AASA;;;AACA,MAAMkG,6BAA6B,GAAG,IAAItK,cAAJ,CAAmB,+BAAnB,EAAoD;EACtFuK,UAAU,EAAE,MAD0E;EAEtFC,OAAO,EAAEC;AAF6E,CAApD,CAAtC;AAIA;;AACA,SAASA,qCAAT,GAAiD;EAC7C,OAAO,IAAI7I,iBAAJ,EAAP;AACH;;AACD,MAAM8I,gBAAN,CAAuB;EACnB7I,WAAW,CAAC8I,QAAD,EAAWhE,KAAX,EAAkBiE,SAAlB,EAA6BC,mBAA7B,EAAkDC,eAAlD,EAAmEC,cAAnE,EAAmF;IAC1F,KAAKJ,QAAL,GAAgBA,QAAhB;IACA,KAAKhE,KAAL,GAAaA,KAAb;IACA,KAAKiE,SAAL,GAAiBA,SAAjB;IACA,KAAKC,mBAAL,GAA2BA,mBAA3B;IACA,KAAKC,eAAL,GAAuBA,eAAvB;IACA,KAAKC,cAAL,GAAsBA,cAAtB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,uBAAL,GAA+B,IAA/B;EACH;EACD;;;EACsB,IAAlBC,kBAAkB,GAAG;IACrB,MAAMC,MAAM,GAAG,KAAKJ,eAApB;IACA,OAAOI,MAAM,GAAGA,MAAM,CAACD,kBAAV,GAA+B,KAAKD,uBAAjD;EACH;;EACqB,IAAlBC,kBAAkB,CAACE,KAAD,EAAQ;IAC1B,IAAI,KAAKL,eAAT,EAA0B;MACtB,KAAKA,eAAL,CAAqBG,kBAArB,GAA0CE,KAA1C;IACH,CAFD,MAGK;MACD,KAAKH,uBAAL,GAA+BG,KAA/B;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIC,iBAAiB,CAACC,SAAD,EAAYC,MAAZ,EAAoB;IACjC,OAAO,KAAKC,OAAL,CAAaF,SAAb,EAAwBC,MAAxB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIE,gBAAgB,CAACpG,QAAD,EAAWkG,MAAX,EAAmB;IAC/B,OAAO,KAAKC,OAAL,CAAanG,QAAb,EAAuBkG,MAAvB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIG,IAAI,CAACC,OAAD,EAAUpH,MAAM,GAAG,EAAnB,EAAuBgH,MAAvB,EAA+B;IAC/B,MAAMK,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKd,cAAvB,CAAd,EAAsDO,MAAtD,CAAhB,CAD+B,CAE/B;IACA;;;IACAK,OAAO,CAAC1J,IAAR,GAAe;MAAEyJ,OAAF;MAAWpH;IAAX,CAAf,CAJ+B,CAK/B;IACA;;IACA,IAAIqH,OAAO,CAAC5J,mBAAR,KAAgC2J,OAApC,EAA6C;MACzCC,OAAO,CAAC5J,mBAAR,GAA8BuD,SAA9B;IACH;;IACD,OAAO,KAAK8F,iBAAL,CAAuB,KAAKU,uBAA5B,EAAqDH,OAArD,CAAP;EACH;EACD;AACJ;AACA;;;EACI1I,OAAO,GAAG;IACN,IAAI,KAAKgI,kBAAT,EAA6B;MACzB,KAAKA,kBAAL,CAAwBhI,OAAxB;IACH;EACJ;;EACD4E,WAAW,GAAG;IACV;IACA,IAAI,KAAKmD,uBAAT,EAAkC;MAC9B,KAAKA,uBAAL,CAA6B/H,OAA7B;IACH;EACJ;EACD;AACJ;AACA;;;EACI8I,wBAAwB,CAACC,UAAD,EAAaV,MAAb,EAAqB;IACzC,MAAMW,YAAY,GAAGX,MAAM,IAAIA,MAAM,CAACY,gBAAjB,IAAqCZ,MAAM,CAACY,gBAAP,CAAwBC,QAAlF;IACA,MAAMA,QAAQ,GAAG5L,QAAQ,CAAC6L,MAAT,CAAgB;MAC7BlB,MAAM,EAAEe,YAAY,IAAI,KAAKrB,SADA;MAE7ByB,SAAS,EAAE,CAAC;QAAEC,OAAO,EAAE1K,iBAAX;QAA8B2K,QAAQ,EAAEjB;MAAxC,CAAD;IAFkB,CAAhB,CAAjB;IAIA,MAAMkB,eAAe,GAAG,IAAI7M,eAAJ,CAAoB,KAAK8M,0BAAzB,EAAqDnB,MAAM,CAACY,gBAA5D,EAA8EC,QAA9E,CAAxB;IACA,MAAMO,YAAY,GAAGV,UAAU,CAACW,MAAX,CAAkBH,eAAlB,CAArB;IACAE,YAAY,CAACE,QAAb,CAAsB3G,cAAtB,GAAuCqF,MAAvC;IACA,OAAOoB,YAAY,CAACE,QAApB;EACH;EACD;AACJ;AACA;;;EACIrB,OAAO,CAACsB,OAAD,EAAUC,UAAV,EAAsB;IACzB,MAAMxB,MAAM,GAAGM,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,IAAIjK,iBAAJ,EAAlB,CAAd,EAA0D,KAAKmJ,cAA/D,CAAd,EAA8F+B,UAA9F,CAAf;;IACA,MAAMd,UAAU,GAAG,KAAKe,cAAL,CAAoBzB,MAApB,CAAnB;;IACA,MAAM0B,SAAS,GAAG,KAAKjB,wBAAL,CAA8BC,UAA9B,EAA0CV,MAA1C,CAAlB;;IACA,MAAMjH,WAAW,GAAG,IAAI9B,cAAJ,CAAmByK,SAAnB,EAA8BhB,UAA9B,CAApB;;IACA,IAAIa,OAAO,YAAYrM,WAAvB,EAAoC;MAChC,MAAM+F,MAAM,GAAG,IAAI3G,cAAJ,CAAmBiN,OAAnB,EAA4B,IAA5B,EAAkC;QAC7CI,SAAS,EAAE3B,MAAM,CAACrJ,IAD2B;QAE7CoC;MAF6C,CAAlC,CAAf;MAIAA,WAAW,CAACuI,QAAZ,GAAuBI,SAAS,CAACjG,oBAAV,CAA+BR,MAA/B,CAAvB;IACH,CAND,MAOK;MACD,MAAM4F,QAAQ,GAAG,KAAKe,eAAL,CAAqB5B,MAArB,EAA6BjH,WAA7B,CAAjB;;MACA,MAAMkC,MAAM,GAAG,IAAI5G,eAAJ,CAAoBkN,OAApB,EAA6BvH,SAA7B,EAAwC6G,QAAxC,CAAf;MACA,MAAMgB,UAAU,GAAGH,SAAS,CAAClG,qBAAV,CAAgCP,MAAhC,CAAnB,CAHC,CAID;;MACAlC,WAAW,CAACuI,QAAZ,GAAuBO,UAAU,CAACP,QAAlC;IACH,CAlBwB,CAmBzB;IACA;IACA;;;IACA,KAAK/B,mBAAL,CACKuC,OADL,CACa3L,WAAW,CAAC4L,eADzB,EAEKtF,IAFL,CAEU9G,SAAS,CAAC+K,UAAU,CAACsB,WAAX,EAAD,CAFnB,EAGKvK,SAHL,CAGe5B,KAAK,IAAI;MACpB6K,UAAU,CAACuB,cAAX,CAA0BhF,SAA1B,CAAoCiF,MAApC,CAA2C,KAAKC,eAAhD,EAAiEtM,KAAK,CAACuM,OAAvE;IACH,CALD;;IAMA,IAAIpC,MAAM,CAACvJ,mBAAX,EAAgC;MAC5B;MACAiL,SAAS,CAAC5G,WAAV,CAAsBrD,SAAtB,CAAgC,MAAM;QAClC,KAAK4D,KAAL,CAAWgH,QAAX,CAAoBrC,MAAM,CAACvJ,mBAA3B,EAAgDuJ,MAAM,CAACxJ,UAAvD;MACH,CAFD;IAGH;;IACD,KAAK8L,gBAAL,CAAsBvJ,WAAtB,EAAmCiH,MAAnC;;IACA,KAAKL,kBAAL,GAA0B5G,WAA1B;IACA,OAAO,KAAK4G,kBAAZ;EACH;EACD;;;EACA2C,gBAAgB,CAACvJ,WAAD,EAAciH,MAAd,EAAsB;IAClC;IACAjH,WAAW,CAACL,cAAZ,GAA6BjB,SAA7B,CAAuC,MAAM;MACzC;MACA,IAAI,KAAKkI,kBAAL,IAA2B5G,WAA/B,EAA4C;QACxC,KAAK4G,kBAAL,GAA0B,IAA1B;MACH;;MACD,IAAIK,MAAM,CAACvJ,mBAAX,EAAgC;QAC5B,KAAK4E,KAAL,CAAWkH,KAAX;MACH;IACJ,CARD;;IASA,IAAI,KAAK5C,kBAAT,EAA6B;MACzB;MACA;MACA,KAAKA,kBAAL,CAAwBjH,cAAxB,GAAyCjB,SAAzC,CAAmD,MAAM;QACrDsB,WAAW,CAAC7B,iBAAZ,CAA8B+E,KAA9B;MACH,CAFD;;MAGA,KAAK0D,kBAAL,CAAwBhI,OAAxB;IACH,CAPD,MAQK;MACD;MACAoB,WAAW,CAAC7B,iBAAZ,CAA8B+E,KAA9B;IACH,CAtBiC,CAuBlC;;;IACA,IAAI+D,MAAM,CAACtJ,QAAP,IAAmBsJ,MAAM,CAACtJ,QAAP,GAAkB,CAAzC,EAA4C;MACxCqC,WAAW,CAACJ,WAAZ,GAA0BlB,SAA1B,CAAoC,MAAMsB,WAAW,CAACX,aAAZ,CAA0B4H,MAAM,CAACtJ,QAAjC,CAA1C;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACI+K,cAAc,CAACzB,MAAD,EAAS;IACnB,MAAMwC,aAAa,GAAG,IAAIxO,aAAJ,EAAtB;IACAwO,aAAa,CAACC,SAAd,GAA0BzC,MAAM,CAACyC,SAAjC;;IACA,IAAIC,gBAAgB,GAAG,KAAKrD,QAAL,CAAcsD,QAAd,GAAyBC,MAAzB,EAAvB,CAHmB,CAInB;;;IACA,MAAMC,KAAK,GAAG7C,MAAM,CAACyC,SAAP,KAAqB,KAAnC;IACA,MAAMK,MAAM,GAAG9C,MAAM,CAACpJ,kBAAP,KAA8B,MAA9B,IACVoJ,MAAM,CAACpJ,kBAAP,KAA8B,OAA9B,IAAyC,CAACiM,KADhC,IAEV7C,MAAM,CAACpJ,kBAAP,KAA8B,KAA9B,IAAuCiM,KAF5C;IAGA,MAAME,OAAO,GAAG,CAACD,MAAD,IAAW9C,MAAM,CAACpJ,kBAAP,KAA8B,QAAzD;;IACA,IAAIkM,MAAJ,EAAY;MACRJ,gBAAgB,CAACM,IAAjB,CAAsB,GAAtB;IACH,CAFD,MAGK,IAAID,OAAJ,EAAa;MACdL,gBAAgB,CAACO,KAAjB,CAAuB,GAAvB;IACH,CAFI,MAGA;MACDP,gBAAgB,CAACQ,kBAAjB;IACH,CAlBkB,CAmBnB;;;IACA,IAAIlD,MAAM,CAACnJ,gBAAP,KAA4B,KAAhC,EAAuC;MACnC6L,gBAAgB,CAACS,GAAjB,CAAqB,GAArB;IACH,CAFD,MAGK;MACDT,gBAAgB,CAACU,MAAjB,CAAwB,GAAxB;IACH;;IACDZ,aAAa,CAACE,gBAAd,GAAiCA,gBAAjC;IACA,OAAO,KAAKrD,QAAL,CAAcyB,MAAd,CAAqB0B,aAArB,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIZ,eAAe,CAAC5B,MAAD,EAASjH,WAAT,EAAsB;IACjC,MAAM4H,YAAY,GAAGX,MAAM,IAAIA,MAAM,CAACY,gBAAjB,IAAqCZ,MAAM,CAACY,gBAAP,CAAwBC,QAAlF;IACA,OAAO5L,QAAQ,CAAC6L,MAAT,CAAgB;MACnBlB,MAAM,EAAEe,YAAY,IAAI,KAAKrB,SADV;MAEnByB,SAAS,EAAE,CACP;QAAEC,OAAO,EAAE/J,cAAX;QAA2BgK,QAAQ,EAAElI;MAArC,CADO,EAEP;QAAEiI,OAAO,EAAE3K,kBAAX;QAA+B4K,QAAQ,EAAEjB,MAAM,CAACrJ;MAAhD,CAFO;IAFQ,CAAhB,CAAP;EAOH;;AAnNkB;;AAqNvByI,gBAAgB,CAAClG,IAAjB;EAAA,iBAA6GkG,gBAA7G,EAteiG3K,EAsejG,UAA+IX,IAAI,CAACuP,OAApJ,GAteiG5O,EAsejG,UAAwK2B,IAAI,CAACkN,aAA7K,GAteiG7O,EAsejG,UAAuMA,EAAE,CAACQ,QAA1M,GAteiGR,EAsejG,UAA+NyB,IAAI,CAACqN,kBAApO,GAteiG9O,EAsejG,UAAmQ2K,gBAAnQ,OAteiG3K,EAsejG,UAAgUuK,6BAAhU;AAAA;;AACAI,gBAAgB,CAACoE,KAAjB,kBAveiG/O,EAuejG;EAAA,OAAiH2K,gBAAjH;EAAA,SAAiHA,gBAAjH;AAAA;;AACA;EAAA,mDAxeiG3K,EAwejG,mBAA2F2K,gBAA3F,EAAyH,CAAC;IAC9G9F,IAAI,EAAEnE;EADwG,CAAD,CAAzH,EAE4B,YAAY;IAChC,OAAO,CAAC;MAAEmE,IAAI,EAAExF,IAAI,CAACuP;IAAb,CAAD,EAAyB;MAAE/J,IAAI,EAAElD,IAAI,CAACkN;IAAb,CAAzB,EAAuD;MAAEhK,IAAI,EAAE7E,EAAE,CAACQ;IAAX,CAAvD,EAA8E;MAAEqE,IAAI,EAAEpD,IAAI,CAACqN;IAAb,CAA9E,EAAiH;MAAEjK,IAAI,EAAE8F,gBAAR;MAA0BnF,UAAU,EAAE,CAAC;QAC/IX,IAAI,EAAElE;MADyI,CAAD,EAE/I;QACCkE,IAAI,EAAEjE;MADP,CAF+I;IAAtC,CAAjH,EAIW;MAAEiE,IAAI,EAAEhD,iBAAR;MAA2B2D,UAAU,EAAE,CAAC;QAC1CX,IAAI,EAAExE,MADoC;QAE1CyE,IAAI,EAAE,CAACyF,6BAAD;MAFoC,CAAD;IAAvC,CAJX,CAAP;EAQH,CAXL;AAAA;AAYA;AACA;AACA;;;AACA,MAAMyE,WAAN,SAA0BrE,gBAA1B,CAA2C;EACvC7I,WAAW,CAACmN,OAAD,EAAUC,IAAV,EAAgB9C,QAAhB,EAA0B+C,kBAA1B,EAA8CC,cAA9C,EAA8DC,aAA9D,EAA6E;IACpF,MAAMJ,OAAN,EAAeC,IAAf,EAAqB9C,QAArB,EAA+B+C,kBAA/B,EAAmDC,cAAnD,EAAmEC,aAAnE;IACA,KAAKtD,uBAAL,GAA+B1H,cAA/B;IACA,KAAKqI,0BAAL,GAAkC7G,oBAAlC;IACA,KAAK6H,eAAL,GAAuB,uBAAvB;EACH;;AANsC;;AAQ3CsB,WAAW,CAACvK,IAAZ;EAAA,iBAAwGuK,WAAxG,EA/fiGhP,EA+fjG,UAAqIX,IAAI,CAACuP,OAA1I,GA/fiG5O,EA+fjG,UAA8J2B,IAAI,CAACkN,aAAnK,GA/fiG7O,EA+fjG,UAA6LA,EAAE,CAACQ,QAAhM,GA/fiGR,EA+fjG,UAAqNyB,IAAI,CAACqN,kBAA1N,GA/fiG9O,EA+fjG,UAAyPgP,WAAzP,OA/fiGhP,EA+fjG,UAAiTuK,6BAAjT;AAAA;;AACAyE,WAAW,CAACD,KAAZ,kBAhgBiG/O,EAggBjG;EAAA,OAA4GgP,WAA5G;EAAA,SAA4GA,WAA5G;EAAA,YAAqI/E;AAArI;;AACA;EAAA,mDAjgBiGjK,EAigBjG,mBAA2FgP,WAA3F,EAAoH,CAAC;IACzGnK,IAAI,EAAEnE,UADmG;IAEzGoE,IAAI,EAAE,CAAC;MAAE0F,UAAU,EAAEP;IAAd,CAAD;EAFmG,CAAD,CAApH,EAG4B,YAAY;IAChC,OAAO,CAAC;MAAEpF,IAAI,EAAExF,IAAI,CAACuP;IAAb,CAAD,EAAyB;MAAE/J,IAAI,EAAElD,IAAI,CAACkN;IAAb,CAAzB,EAAuD;MAAEhK,IAAI,EAAE7E,EAAE,CAACQ;IAAX,CAAvD,EAA8E;MAAEqE,IAAI,EAAEpD,IAAI,CAACqN;IAAb,CAA9E,EAAiH;MAAEjK,IAAI,EAAEmK,WAAR;MAAqBxJ,UAAU,EAAE,CAAC;QAC1IX,IAAI,EAAElE;MADoI,CAAD,EAE1I;QACCkE,IAAI,EAAEjE;MADP,CAF0I;IAAjC,CAAjH,EAIW;MAAEiE,IAAI,EAAEhD,iBAAR;MAA2B2D,UAAU,EAAE,CAAC;QAC1CX,IAAI,EAAExE,MADoC;QAE1CyE,IAAI,EAAE,CAACyF,6BAAD;MAFoC,CAAD;IAAvC,CAJX,CAAP;EAQH,CAZL;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAAS3I,kBAAT,EAA6B2I,6BAA7B,EAA4DG,qCAA5D,EAAmGsE,WAAnG,EAAgHnN,iBAAhH,EAAmIgE,oBAAnI,EAAyJoE,iBAAzJ,EAA4KzH,cAA5K,EAA4L6B,cAA5L,EAA4MsG,gBAA5M,EAA8NlF,qBAA9N"},"metadata":{},"sourceType":"module"}